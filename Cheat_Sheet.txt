— Shell Commands

Q1.
Create Database as Msc_RollNo_NGD

use Msc_07_NGD

Crete three empty collections

mongoimport --db <database_name> --collection <collection_name> --file <path_to_file> --type <file_type>

Display all records from the collection

db.movies.find({})

Display single record

db.movies.findOne()

Enable profiling for all the queries

db.setProfilingLevel(2)

Create Index

db.movies.createIndex({_id:1})
db.movies.getIndexes()

Display the records tracked by the profiler

db.system.profile.find({}).pretty()



Q2. Attempt any 4 or 5 

Find data between year 2002 to 2006

db.movies.find({‘year’:{$gte:2002,$lte:2006}})
Rating is grater than reviews

db.movies.find({"tomatoes.rating":{$gte:"tomatoes.numReviews"}})

Only display recording date, town, property type

db.movies.find({},{‘recording date’:1,’town’:1,”property type”:1,_id:0})

To find all data where resinditial bank is blank

db.movies.find({‘resenditial bank’:{$exists:false}})

To display list of unique property type

db.movies.distinct(‘property type’)

2. 

To extract records where  Legislative District is between 30 to 40 and electric range less than 100

db.movies.find({‘Legislative District’:{$gte :30, $lte:40},’electric’:{$lt:100}}})

Extract list of unique model

db.movies.distinct(‘model’)

Extract count of records for tesla

db.movies.countDocuments({‘model’:’Tesla’})

Extract VIN pin in ascending order

db.movies.find().sort({‘VIN’:1})

To Change Model from 500 to FIAT5

db.movies.updateMany({‘model’:500},{$set:’model’:’FIAT5’})

3. 

To extract records where occupation is null

db.movies.find({‘year’:null})
Update occupation as “Not Working” where it is null

db.movies.updateMany({‘occupation’:null},{$set:{‘occupation’:’Not Working’}})


4.
Extract the list of unique Model

db.movies.distinct(‘model’)

Extrat where utility contains ‘BONNE’

db.movies.find({‘utility’:{$regex:/BONNE/,options:’i’}})

Extract contains Ca or IN or OH or WA

db.movies.find({‘state’:{$regex:/Ca|IN|OH|WA/i}})

5.

Find all data where property type is apartment or vacant land

db.movies.find({‘property type’:’apartment’|;vacant land’})

To insert 5 records in the collection

db.movies.insertMany([{_id:1,’name’:’Gautami’},_id:2,’name’:’Gautami’},_id:3,’name’:’Gautami’},_id:4,’name’:’Gautami’},_id:5,’name’:’Gautami’}])

Return the count of documents in the collection

db.movies.countDocuments()

To extract 25 records from the 5th position

db.movies.find({}).skip(4).limit(25)

Extract records in descending order based on sales ratio

db.movies.find().sort({‘sales ratio’:-1})

— ChatGPT

// Q1: Database and Collection Operations

// Create Database
use Msc_07_NGD

// Create Three Empty Collections
db.createCollection("collection1")
db.createCollection("collection2")
db.createCollection("collection3")

// Import Data from a File
// mongoimport --db Msc_07_NGD --collection <collection_name> --file <path_to_file> --type <file_type> [additional_options]

// Display All Records from the Collection
db.movies.find({})

// Display a Single Record
db.movies.findOne()

// Enable Profiling for All Queries
db.setProfilingLevel(2)

// Create an Index
db.movies.createIndex({ _id: 1 })

// Get Indexes
db.movies.getIndexes()

// Display Records Tracked by the Profiler
db.system.profile.find({}).pretty()

// Q2: Data Retrieval and Manipulation Operations

// Find Data Between Year 2002 to 2006
db.movies.find({ 'year': { $gte: 2002, $lte: 2006 } })

// Rating is Greater than Reviews
db.movies.find({ "tomatoes.rating": { $gte: "tomatoes.numReviews" } })

// Only Display Recording Date, Town, Property Type
db.movies.find({}, { 'recording date': 1, 'town': 1, 'property type': 1, _id: 0 })

// To Find All Data Where Residential Bank is Blank
db.movies.find({ 'residential bank': { $exists: false } })

// To Display List of Unique Property Type
db.movies.distinct('property type')

// To Extract Records Where Legislative District is Between 30 to 40 and Electric Range Less Than 100
db.movies.find({ 'Legislative District': { $gte: 30, $lte: 40 }, 'electric': { $lt: 100 } })

// Extract List of Unique Model
db.movies.distinct('model')

// Extract Count of Records for Tesla
db.movies.countDocuments({ 'model': 'Tesla' })

// Extract VIN Pin in Ascending Order
db.movies.find().sort({ 'VIN': 1 })

// To Change Model from 500 to FIAT5
db.movies.updateMany({ 'model': 500 }, { $set: { 'model': 'FIAT5' } })

// To Extract Records Where Occupation is Null
db.movies.find({ 'occupation': null })

// Update Occupation as “Not Working” Where It Is Null
db.movies.updateMany({ 'occupation': null }, { $set: { 'occupation': 'Not Working' } })

// Extract the List of Unique Model
db.movies.distinct('model')

// Extract Where Utility Contains ‘BONNE’
db.movies.find({ 'utility': { $regex: /BONNE/, $options: 'i' } })

// Extract Contains Ca or IN or OH or WA
db.movies.find({ 'state': { $regex: /Ca|IN|OH|WA/i } })

// Find All Data Where Property Type is Apartment or Vacant Land
db.movies.find({ 'property type': { $in: ['apartment', 'vacant land'] } })

// To Insert 5 Records in the Collection
db.movies.insertMany([
    { _id: 1, 'name': 'Gautami' },
    { _id: 2, 'name': 'Gautami' },
    { _id: 3, 'name': 'Gautami' },
    { _id: 4, 'name': 'Gautami' },
    { _id: 5, 'name': 'Gautami' }
])

// Return the Count of Documents in the Collection
db.movies.countDocuments()

// To Extract 25 Records from the 5th Position
db.movies.find({}).skip(4).limit(25)

// Extract Records in Descending Order Based on Sales Ratio
db.movies.find().sort({ 'sales ratio': -1 })

—-- PyMongo

2. Perform the following
Create a database as MSC Rollno_NGD

	db = client([‘Msc_07_NGD’])

Create 3 empty collections and import the datasets into the collections

col1 = db['Collection1']
col2 = db['Collection2']
col3 = db['Collection3']

Display all records from the collections (python)

import pprint
for i in col.find():
    pprint.pprint(i)

Display single record from the collections (python)

col.find_one()

Create an index on the collections

col.create_index({‘title’:1})

For i in col.list_indexes():
	pprint.pprint(i)

Enable profiling for all the queries

db.command({‘profile’:2})

Display the records tracked by the profiler
	For i in db.system.profile.find():
	pprint.pprint(i)



Q5

1. 

a. To extract make, model, vehicle type

For i in col.find({},{‘make’:1,’model’:1,’vehicle type’:1,_id:0}):
	pprint.pprint(i)

b. To extract records where country is orange and city is buena park

For i in col.find({‘country’:’orange’,’city’:’buena park’}):
	pprint.pprint(i)

c. To extract records where Electric range is greater than 250

For i in col.find({‘Electric range’:{‘$gt’:250}}):
	pprint.pprint(i)

d. To extract records where electric utility contains "BONNEVILLE" 

For i in col.find({‘utility’:{‘$regex’:”.*BONNEVILLE.*”,’$options’:’i’}):
	pprint.pprint(i)

e. To Insert 5 records

new_cars = [ {"make": "Tesla", "model": "Model S", "vehicle_type": "Electric", "country": "USA", "electric_range": 350, "electric_utility": "BONNEVILLE POWER"}, {"make": "Chevrolet", "model": "Bolt", "vehicle_type": "Electric", "country": "USA", "electric_range": 259, "electric_utility": "PORTLAND"}, {"make": "Nissan", "model": "Leaf", "vehicle_type": "Electric", "country": "Japan", "electric_range": 150, "electric_utility": "TOKYO UTILITY"}, {"make": "BMW", "model": "i3", "vehicle_type": "Hybrid", "country": "Germany", "electric_range": 200, "electric_utility": "BONNEVILLE"}, {"make": "Audi", "model": "E-Tron", "vehicle_type": "Electric", "country": "Germany", "electric_range": 250, "electric_utility": "EUROPE UTILITY"} ]

col.insert_many(new_cars)



2. 

a. To extract records where claims were made more than 3 times and claim amount is greater than 3000

For i in col.find({‘claims’:{‘$gt’:3},’claim amount’:{‘$gt’:3000}}):
	pprint.pprint(i)

b. To count the number of records where car is used for private use

col.count_documents({‘car’:’private’})

c. To update scrap column with value as yes for model year less than 2000 

col.update_many({‘model’:{‘$lt’:2000}},{‘$set’:{‘scrap’:’yes’}})

d. To update occupation as "Not working" where it is null

col.update_many({‘occupation’:None},{‘$set’:{‘occupation’:’Not Working’}})

e. To display all indexes created

For i in col.list_indexes():
	pprint.pprint(i)


3.

a. To extract records where state does not contains CA or IN or OH or WA

For i in col.find({‘state’:{‘$nin’:[‘CA’,’IN’,’OH’,’WA’]}}):
	pprint.pprint(i)

b. To change the Model from 500 to FIAT 500

col.update_many({‘model’:500},{‘$set’:{‘model’:’FIAT500’}})

c. extract records where Legislative District is between 30 to 40 and electric
range less than 100

For i in col.find({‘Legislative District’:{‘$gt’:30,’$lt’:40},’eletric range’:{‘lt’:100}}):
		pprint.pprint(i)


d. To extract the count of records for Tesla make

col.count_documents({‘make’:’Tesla’})

e. To delete the record where model year is less than 2000

col.delete_many({‘year’:{‘$lt’:2000}})

4.

a. To find all data where residential type is blank

	For i in col.find({‘residential’:{"$eq": ""}}):
		pprint.pprint(i)

b. To insert a collection of nearby cities for each property type 

nearby_cities_data = [ {"property_type": "House", "nearby_cities": ["CityA", "CityB", "CityC"]}, {"property_type": "Apartment", "nearby_cities": ["CityD", "CityE", "CityF"]}, {"property_type": "Condo", "nearby_cities": ["CityG", "CityH", "CityI"]}, ] 

real_estate_collection.insert_many(nearby_cities_data)

c. To find all data where assessed amount is greater than sale amount

For i in col.find({‘amount’:{‘$gt’:’sale’}}):
	pprint.pprint(i)

d. To delete records where non-use-code is Foreclosure

col.delete_many({‘non-use-code’:’Foreclosure’})

e. To extract the first 30 records based on Assessed amount  lowest first.

For i in col.find({}).sort({‘Assessed Amount’:1}).limit(30):
	pprint.pprint(i)


5. 

a. To add a column as scrap
db.update_many({},{‘$set’:{‘scrap’:None}})


b. To update scrap column with value as yes for model year less than 2000 

col.update_many({‘model’:{‘$lt’:2000}},{‘$set’:{‘scrap’:’yes’}})

c. To create an index on Model column

col.create_index({‘model’:1})

d. To query and use the index created

For i in col.find({‘model’:’cars’}):
	pprint.pprint(i)

e. To delete the index created on Model column

col.drop_index(‘model_1’)


—--- ChatGPT

from pymongo import MongoClient
import csv
import pprint

# Step 1: Create a MongoDB database
client = MongoClient('mongodb://localhost:27017/')  # Connect to MongoDB
db = client['Msc_07_NGD']  # Create a database

# Step 2: Create 3 collections within the database
col1 = db['Collection1']
col2 = db['Collection2']
col3 = db['Collection3']

# Step 3: Import a CSV file into the collections
def import_csv_to_collection(csv_file_path, collection):
    with open(csv_file_path, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        data = [row for row in reader]  # Read all rows
        collection.insert_many(data)  # Insert into MongoDB collection

# Example CSV imports (change file path accordingly)
import_csv_to_collection('path_to_csv_file_1.csv', col1)
import_csv_to_collection('path_to_csv_file_2.csv', col2)
import_csv_to_collection('path_to_csv_file_3.csv', col3)

# Step 4: Display all records from a collection
def display_all_records(collection):
    for record in collection.find():
        pprint.pprint(record)

# Display all records from Collection1
display_all_records(col1)

# Step 5: Display a single record from a collection
def display_single_record(collection):
    pprint.pprint(collection.find_one())

# Display a single record from Collection2
display_single_record(col2)

# Step 6: Create an index on 'title' in Collection1
col1.create_index([('title', 1)])

# Step 7: Display all indexes created
def display_indexes(collection):
    for index in collection.list_indexes():
        pprint.pprint(index)

# Display indexes for Collection1
display_indexes(col1)

# Step 8: Enable profiling for all queries
db.command({'profile': 2})

# Step 9: Display the records tracked by the profiler
def display_profiler_data(db):
    for record in db.system.profile.find():
        pprint.pprint(record)

display_profiler_data(db)

# Step 10: Extract specific data from collections (Q5 examples)
# Q5.1.a - Extract make, model, vehicle type
for i in col1.find({}, {'make': 1, 'model': 1, 'vehicle type': 1, '_id': 0}):
    pprint.pprint(i)

# Q5.1.b - Extract records where country is 'orange' and city is 'buena park'
for i in col1.find({'country': 'orange', 'city': 'buena park'}):
    pprint.pprint(i)

# Q5.1.c - Extract records where Electric range is greater than 250
for i in col1.find({'Electric range': {'$gt': 250}}):
    pprint.pprint(i)

# Q5.1.d - Extract records where electric utility contains "BONNEVILLE"
for i in col1.find({'utility': {'$regex': '.*BONNEVILLE.*', '$options': 'i'}}):
    pprint.pprint(i)

# Q5.1.e - Insert 5 records into Collection1
new_cars = [
    {"make": "Tesla", "model": "Model S", "vehicle_type": "Electric", "country": "USA", "electric_range": 350, "electric_utility": "BONNEVILLE POWER"},
    {"make": "Chevrolet", "model": "Bolt", "vehicle_type": "Electric", "country": "USA", "electric_range": 259, "electric_utility": "PORTLAND"},
    {"make": "Nissan", "model": "Leaf", "vehicle_type": "Electric", "country": "Japan", "electric_range": 150, "electric_utility": "TOKYO UTILITY"},
    {"make": "BMW", "model": "i3", "vehicle_type": "Hybrid", "country": "Germany", "electric_range": 200, "electric_utility": "BONNEVILLE"},
    {"make": "Audi", "model": "E-Tron", "vehicle_type": "Electric", "country": "Germany", "electric_range": 250, "electric_utility": "EUROPE UTILITY"}
]
col1.insert_many(new_cars)

# Q5.2.a - Extract records where claims > 3 and claim amount > 3000
for i in col2.find({'claims': {'$gt': 3}, 'claim amount': {'$gt': 3000}}):
    pprint.pprint(i)

# Q5.2.b - Count records where car is used for private use
private_use_count = col2.count_documents({'car': 'private'})
print(f"Number of records where car is for private use: {private_use_count}")

# Q5.2.c - Update 'scrap' column to 'yes' for model year less than 2000
col2.update_many({'model': {'$lt': 2000}}, {'$set': {'scrap': 'yes'}})

# Q5.2.d - Update 'occupation' as "Not Working" where it is null
col2.update_many({'occupation': None}, {'$set': {'occupation': 'Not Working'}})

# Q5.2.e - Display all indexes created in Collection2
display_indexes(col2)

# Q5.3.a - Extract records where state does not contain CA, IN, OH, WA
for i in col3.find({'state': {'$nin': ['CA', 'IN', 'OH', 'WA']}}):
    pprint.pprint(i)

# Q5.3.b - Change the model from 500 to FIAT 500
col3.update_many({'model': 500}, {'$set': {'model': 'FIAT500'}})

# Q5.3.c - Extract records where Legislative District is between 30 and 40 and electric range < 100
for i in col3.find({'Legislative District': {'$gt': 30, '$lt': 40}, 'electric range': {'$lt': 100}}):
    pprint.pprint(i)

# Q5.3.d - Count records for Tesla make
tesla_count = col3.count_documents({'make': 'Tesla'})
print(f"Number of Tesla records: {tesla_count}")

# Q5.3.e - Delete records where model year < 2000
col3.delete_many({'year': {'$lt': 2000}})

# Q5.4.a - Find all data where residential type is blank
for i in col3.find({'residential': {"$eq": ""}}):
    pprint.pprint(i)

# Q5.4.b - Insert nearby cities collection for each property type
nearby_cities_data = [
    {"property_type": "House", "nearby_cities": ["CityA", "CityB", "CityC"]},
    {"property_type": "Apartment", "nearby_cities": ["CityD", "CityE", "CityF"]},
    {"property_type": "Condo", "nearby_cities": ["CityG", "CityH", "CityI"]},
]
db['real_estate_collection'].insert_many(nearby_cities_data)

# Q5.4.c - Find data where assessed amount > sale amount
for i in col3.find({'amount': {'$gt': 'sale'}}):
    pprint.pprint(i)

# Q5.4.d - Delete records where non-use-code is 'Foreclosure'
col3.delete_many({'non-use-code': 'Foreclosure'})

# Q5.4.e - Extract the first 30 records based on Assessed Amount (lowest first)
for i in col3.find({}).sort([('Assessed Amount', 1)]).limit(30):
    pprint.pprint(i)

# Q5.5.a - Add a column as scrap in all documents
db.update_many({}, {'$set': {'scrap': None}})

# Q5.5.b - Update scrap column to 'yes' for model year less than 2000
col3.update_many({'model': {'$lt': 2000}}, {'$set': {'scrap': 'yes'}})

# Q5.5.c - Create an index on the 'model' column
col3.create_index([('model', 1)])

# Q5.5.d - Query and use the index created on 'model' column
for i in col3.find({'model': 'cars'}):
    pprint.pprint(i)

# Q5.5.e - Delete the index created on 'model' column
col3.drop_index('model_1')



Priya code

from pymongo import MongoClient
#To create 3 empty collection in the required data  
# Connect to MongoDB server
client = MongoClient("mongodb://localhost:27017/")

# Create a new database (it will be created automatically when a collection is created)
db = client['MSc_Rollno_NGD']  # Replace with your database name

# Create collections by inserting documents
# Real Estate collection
col=db['real_estate']
db.real_estate.insert_one({})  # Inserts an empty document, creating the 'real_estate' collection

# Electric Vehicle collection
db.electric_vehicle.insert_one({})  # Inserts an empty document, creating the 'electric_vehicle' collection

# Car Insurance collection
db.car_insurance.insert_one({})  # Inserts an empty document, creating the 'car_insurance' collection

print("Collections created successfully!")


################################
mo=client['MSc_Rollno_NGD']
mo
df=conn.list_database_names()
df

es=conn.get_database('MSc_Rollno_NGD')
es

df=es.list_collection_names()
df
####################################

import pymongo
import datetime
import pprint # for fromatted output as an similar to  uniprint type 
from pymongo import MongoClient

conn = MongoClient("localhost",27017) # connecting with the local database where 27017 is a default port no
#conn = MongoClient('mongodb+srv://root:root@sdbicluster.kifbcjy.mongodb.net/')# this connection is for MongoAtlas 
print('connected',conn);
# getting the list of  the database  
dbl = conn.list_database_names()
dbl
#

db=conn.get_database('MSC2024')
db
#to lis the collection 
coll=db.list_collection_names()
coll

# to select the collections from database
movies=db.get_collection('movies')
print(movies)

# To display Single record of  the data from the collection 
rec = movies.find_one() 
print(rec)

# Find all records from the 'movies' collection
records = movies.find()

# Iterate over the cursor and print each record
print("All Records:")
for record in records:
    print(record)


    
    
# create an index on the collections 
m_index= movies.create_index([('title',1)]) # 1 For Ascending
print(m_index)

m_index=movies.create_index([('title',-1)]) # -1 For dexscending
print(m_index)


#Enable profiling for all the queries
# Enable profiling level 2 (profile all queries)
db.command('profile', 2)

print("Profiling enabled for all queries.")

#Display the records track by the profiler
profiled_records = db['system.profile'].find()

# Iterate and display the profiled records
print("Tracked records by profiler:")
for record in profiled_records:
    print(record)
    



## Q3
#

# a. To extract title, director, and genre
result_a = movies_collection.find({}, {"title": 1, "director": 1, "genre": 1, "_id": 0})
for doc in result_a:
    print(doc)

# b. To extract records where country is "Orange" and city is "Buena Park" (hypothetical data fields for movies)
result_b = movies_collection.find({"country": "Orange", "city": "Buena Park"})
for doc in result_b:
    print(doc)

# c. To extract records where the movie's rating is greater than 8
result_c = movies_collection.find({"rating": {"$gt": 8}})
for doc in result_c:
    print(doc)

# d. To insert 5 movie records
movies_collection.insert_many([
    {"title": "Inception", "director": "Christopher Nolan", "genre": "Sci-Fi", "release_year": 2010, "rating": 8.8},
    {"title": "The Godfather", "director": "Francis Ford Coppola", "genre": "Crime", "release_year": 1972, "rating": 9.2},
    {"title": "The Dark Knight", "director": "Christopher Nolan", "genre": "Action", "release_year": 2008, "rating": 9.0},
    {"title": "Forrest Gump", "director": "Robert Zemeckis", "genre": "Drama", "release_year": 1994, "rating": 8.8},
    {"title": "The Matrix", "director": "The Wachowskis", "genre": "Sci-Fi", "release_year": 1999, "rating": 8.7}
])

# e. To extract records where the production company contains "Warner Bros"
result_e = movies_collection.find({"production_company": {"$regex": "Warner Bros", "$options": "i"}})
for doc in result_e:
    print(doc)


###Q3- b

# a. To extract records where the claims made are more than 3 and claim amount is greater than 3000
# Hypothetical fields: claims_made, claim_amount (replace these with actual movie fields)
result_a = movies_collection.find({"claims_made": {"$gt": 3}, "claim_amount": {"$gt": 3000}})
for doc in result_a:
    print(doc)

# b. To count the number of records where the car is used for private use
# Hypothetical field: usage (replace with actual movie fields)
private_use_count = movies_collection.count_documents({"usage": "private"})
print("Number of movies where usage is private:", private_use_count)

# c. To update a column (hypothetical 'serap' field) with value 'yes' for movies released before the year 2000
# Replace 'serap' with an actual field name
movies_collection.update_many({"release_year": {"$lt": 2000}}, {"$set": {"serap": "yes"}})

# d. To update 'chupation' as "Not working" where it is null (replace with actual field name)
# Replace 'chupation' with an actual field name
movies_collection.update_many({"chupation": None}, {"$set": {"chupation": "Not working"}})

# e. To display all indexes created in the movies collection
indexes = movies_collection.index_information()
for index_name, index_info in indexes.items():
    print(f"Index Name: {index_name}, Index Info: {index_info}")




# Q3-c



# Query a: Change the title from "500" to "FIAT500" where country does not contain "CA" or "16"
movies_collection.update_many(
    {"title": "500", "country": {"$nin": ["CA", "16"]}},
    {"$set": {"title": "FIAT500"}}
)
print("Titles updated from '500' to 'FIAT500' where country is not CA or 16.")

# Query b: Extract records where Legislative District is IN, OH, or WA, and age rating is between 30 to 40, and runtime is less than 100 minutes
result_b = movies_collection.find(
    {"legislative_district": {"$in": ["IN", "OH", "WA"]}, 
     "age_rating": {"$gte": 30, "$lte": 40}, 
     "runtime": {"$lt": 100}}
)
print("\nMovies that match the criteria:")
for doc in result_b:
    print(doc)

# Query c: Extract the count of records for Tesla make (assuming Tesla as production company)
tesla_count = movies_collection.count_documents({"production_company": "Tesla"})
print(f"\nNumber of movies produced by Tesla: {tesla_count}")

# Query d: Delete the record where the release year is less than 2000
delete_result = movies_collection.delete_many({"release_year": {"$lt": 2000}})
print(f"\nDeleted {delete_result.deleted_count} movies released before the year 2000.")

# Query e: Extract the count of records for a specific director (e.g., Christopher Nolan)
director_count = movies_collection.count_documents({"director": "Christopher Nolan"})
print(f"\nNumber of movies directed by Christopher Nolan: {director_count}")




# Q3-d



# Query a: Find all data where genre is blank (equivalent to residential type being blank)
result_a = movies_collection.find({"genre": ""})
print("\nMovies where genre is blank:")
for doc in result_a:
    print(doc)

# Query b: Insert a collection of nearby cities for each movie genre (property type)
movies_collection.update_many(
    {}, 
    {"$set": {"nearby_cities": ["New York", "Los Angeles", "Chicago"]}}  # Example nearby cities
)
print("\nNearby cities inserted for all movie records.")

# Query c: Find all data where the box office amount is greater than the budget (equivalent to assessed amount being greater than sale amount)
result_c = movies_collection.find({"box_office": {"$gt": "budget"}})
print("\nMovies where box office is greater than budget:")
for doc in result_c:
    print(doc)

# Query d: Delete records where the rating is 'Foreclosure' (equivalent to non-use-code being 'Foreclosure')
delete_result_d = movies_collection.delete_many({"rating": "Foreclosure"})
print(f"\nDeleted {delete_result_d.deleted_count} movies with rating 'Foreclosure'.")

# Query e: Extract the first 30 records based on budget, sorted from lowest to highest
result_e = movies_collection.find({}).sort("budget", 1).limit(30)
print("\nFirst 30 movies sorted by budget in ascending order:")
for doc in result_e:
    print(doc)



